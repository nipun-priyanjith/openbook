# -*- coding: utf-8 -*-
"""Untitled8.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VcK6cvL44KF5xrrqLmvuXhby4Dvp4HT-
"""

#*********************************************
#************ SESSION 1: INTRO TO PYTHON *****
#*********************************************

# Python is an interpreted, high-level, general-purpose programming language.
# Common libraries in computing math: NumPy, Pandas, Matplotlib, Scikit-learn

#*********************************************
#**************** BASIC SYNTAX ***************
#*********************************************

print("Hello, World!")
# Output: Hello, World!

a = 10
A = 20
print(a, A)
# Output: 10 20

"""
This is a multi-line comment.
"""

#*********************************************
#************* VARIABLES & TYPES *************
#*********************************************

x = 5           # int
y = 2.5         # float
name = "Nipun"  # string
is_ok = True    # boolean

print(type(x), type(y), type(name), type(is_ok))
# Output: <class 'int'> <class 'float'> <class 'str'> <class 'bool'>

x = float(x)
y = int(y)
print(x, y)
# Output: 5.0 2

#*********************************************
#***************** STRINGS *******************
#*********************************************

s = "Python Basics"
print(s.lower())           # Output: python basics
print(s.upper())           # Output: PYTHON BASICS
print(s[0:6])              # Output: Python
print(len(s))              # Output: 13
print(s.replace("Basics", "Programming"))  # Output: Python Programming
print("Hello" + " " + "World")             # Output: Hello World

#*********************************************
#***************** OPERATORS *****************
#*********************************************

a, b = 10, 3
print(a + b)   # Output: 13
print(a - b)   # Output: 7
print(a * b)   # Output: 30
print(a / b)   # Output: 3.3333333333333335
print(a // b)  # Output: 3
print(a % b)   # Output: 1
print(a ** b)  # Output: 1000

#*********************************************
#**************** CONDITIONALS ***************
#*********************************************

x = 10
if x > 0:
    print("Positive")
elif x == 0:
    print("Zero")
else:
    print("Negative")
# Output: Positive

#*********************************************
#***************** LOOPS *********************
#*********************************************

i = 1
while i <= 3:
    print(i)
    i += 1
# Output:
# 1
# 2
# 3

for i in range(3):
    print("Loop:", i)
# Output:
# Loop: 0
# Loop: 1
# Loop: 2

for i in range(1, 3):
    for j in range(1, 3):
        print(f"i={i}, j={j}")
# Output:
# i=1, j=1
# i=1, j=2
# i=2, j=1
# i=2, j=2

#*********************************************
#****************** LISTS ********************
#*********************************************

nums = [10, 20, 30, 40]
print(nums)          # Output: [10, 20, 30, 40]
nums.append(50)
print(nums)          # Output: [10, 20, 30, 40, 50]
nums.remove(30)
print(nums)          # Output: [10, 20, 40, 50]
print(nums[0], nums[-1])  # Output: 10 50
print(nums[1:3])     # Output: [20, 40]
print(len(nums))     # Output: 4
print(max(nums))     # Output: 50
print(min(nums))     # Output: 10
print(sum(nums))     # Output: 120

#*********************************************
#****************** TUPLES *******************
#*********************************************

t = (1, 2, 3, 4)
print(t)         # Output: (1, 2, 3, 4)
print(t[0])      # Output: 1

#*********************************************
#******************* SETS ********************
#*********************************************

s1 = {1, 2, 3, 3}
s2 = {3, 4, 5}
print(s1)         # Output: {1, 2, 3}
print(s1 | s2)    # Output: {1, 2, 3, 4, 5}
print(s1 & s2)    # Output: {3}
print(s1 - s2)    # Output: {1, 2}

#*********************************************
#**************** DICTIONARIES ***************
#*********************************************

person = {"name": "Nipun", "age": 25}
print(person)            # Output: {'name': 'Nipun', 'age': 25}
print(person["name"])    # Output: Nipun
person["age"] = 26
person["city"] = "Colombo"
print(person)
# Output: {'name': 'Nipun', 'age': 26, 'city': 'Colombo'}
print(person.keys())     # Output: dict_keys(['name', 'age', 'city'])
print(person.values())   # Output: dict_values(['Nipun', 26, 'Colombo'])

#*********************************************
#***************** FUNCTIONS *****************
#*********************************************

def greet(name):
    """Return greeting message"""
    return f"Hello, {name}!"

print(greet("Nipun"))
# Output: Hello, Nipun!

def add(a, b=5):
    return a + b

print(add(10))       # Output: 15
print(add(10, 20))   # Output: 30

#*********************************************
#****************** LAMBDA *******************
#*********************************************

square = lambda x: x**2
print(square(5))
# Output: 25

#*********************************************
#****************** CLASSES ******************
#*********************************************

class Student:
    def __init__(self, name, marks):
        self.name = name
        self.marks = marks

    def display(self):
        print(f"Name: {self.name}, Marks: {self.marks}")

s1 = Student("Nipun", 85)
s1.display()
# Output: Name: Nipun, Marks: 85

#*********************************************
#**************** EXCEPTIONS *****************
#*********************************************

try:
    x = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero!")
finally:
    print("Done handling error.")
# Output:
# Cannot divide by zero!
# Done handling error.

#*********************************************
#**************** FILE HANDLING **************
#*********************************************

with open("test.txt", "w") as f:
    f.write("Hello Python\n")

with open("test.txt", "r") as f:
    print(f.read())
# Output: Hello Python

#*********************************************
#****************** MODULES ******************
#*********************************************

import math
print(math.sqrt(16))   # Output: 4.0
print(math.pi)         # Output: 3.141592653589793

import random
print(random.randint(1, 10))  # Output: (random number 1â€“10)

#*********************************************
#**************** NUMPY INTRO ****************
#*********************************************

import numpy as np
arr = np.array([1, 2, 3, 4])
print(arr)          # Output: [1 2 3 4]
print(arr * 2)      # Output: [2 4 6 8]
print(arr.mean())   # Output: 2.5

#*********************************************
#**************** PANDAS INTRO ***************
#*********************************************

import pandas as pd
data = {'Name': ['A', 'B', 'C'], 'Marks': [90, 85, 88]}
df = pd.DataFrame(data)
print(df)
# Output:
#   Name  Marks
# 0    A     90
# 1    B     85
# 2    C     88
print(df.describe())
# Output: basic stats (count, mean, std, min, etc.)

#*********************************************
#*************** MATPLOTLIB INTRO ************
#*********************************************

import matplotlib.pyplot as plt
x = [1, 2, 3, 4]
y = [2, 4, 6, 8]
plt.plot(x, y, marker='o')
plt.title("Simple Line Plot")
plt.xlabel("X-axis")
plt.ylabel("Y-axis")
plt.show()
# Output: (shows a line plot graph)

#*********************************************
#*************** END OF SESSION 1 ************
#*********************************************

#*********************************************
#************** NUMPY INSTALLATION ************
#*********************************************

# Install NumPy in Colab (only needed once)
!pip install numpy

# Import NumPy library
import numpy as np

# Check version
print(np.__version__)  # Example output: 1.26.4

#*********************************************
#*************** NUMPY ARRAYS *****************
#*********************************************

# Creating 1D array
arr = np.array([1, 2, 3, 4, 5])
print(arr)         # [1 2 3 4 5]
print(type(arr))   # <class 'numpy.ndarray'>

# Creating 2D array
arr2d = np.array([[1, 2, 3], [4, 5, 6]])
print(arr2d)
# [[1 2 3]
#  [4 5 6]]

#*********************************************
#************* ARRAY ATTRIBUTES ***************
#*********************************************

arr = np.array([1, 2, 3, 4, 5])
print("Shape:", arr.shape)     # (5,)
print("Size:", arr.size)       # 5
print("Data Type:", arr.dtype) # int64
print("Dimension:", arr.ndim)  # 1

#*********************************************
#*************** ARRAY OPERATIONS *************
#*********************************************

# Vectorized addition
arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
print(arr1 + arr2)  # [5 7 9]

# Scalar multiplication
arr = np.array([1, 2, 3])
print(arr * 2)  # [2 4 6]

# Applying custom function
def custom_func(x):
    return x**2 + 2*x + 1

a1 = np.array([1, 2, 3, 4])
print(custom_func(a1))  # [ 4  9 16 25]

#*********************************************
#********* INDEXING AND SLICING **************
#*********************************************

arr = np.array([10, 20, 30, 40, 50])
print(arr[2])  # 30

arr2d = np.array([[1,2,3,4,5], [6,7,8,9,10]])
print('2nd element on 1st row:', arr2d[0, 1])  # 2
print('Last element from 2nd row:', arr2d[1, -1])  # 10

# Slicing
print(arr[1:4])  # [20 30 40]

#*********************************************
#*************** RESHAPING *******************
#*********************************************

arr = np.array([1, 2, 3, 4, 5, 6])
reshaped = arr.reshape(2, 3)
print(reshaped)
# [[1 2 3]
#  [4 5 6]]

#*********************************************
#************** BROADCASTING *****************
#*********************************************

arr = np.array([1, 2, 3])
print(arr + 5)  # [6 7 8]

#*********************************************
#************ MATH FUNCTIONS *****************
#*********************************************

arr = np.array([0, np.pi/2, np.pi])
print(np.sin(arr))  # [0. 1. 0.]

#*********************************************
#************** RANDOM MODULE ****************
#*********************************************

# Random numbers
print(np.random.random(5))        # 5 random floats [0-1)
print(np.random.rand(3, 4))       # 3x4 random matrix
print(np.random.randint(0, 10, size=(2, 5)))  # random ints

#*********************************************
#************** LINEAR ALGEBRA ***************
#*********************************************

A = np.array([[1, 2], [3, 4]])
B = np.array([[5, 6], [7, 8]])

print(np.dot(A, B))
# [[19 22]
#  [43 50]]

print(A @ B)
# [[19 22]
#  [43 50]]

#*********************************************
#*********** SOLVING LINEAR SYSTEM ***********
#*********************************************

A = np.array([[2, 3], [1, 2]])
b = np.array([5, 4])
x = np.linalg.solve(A, b)
print(x)  # [2. 1.]

#*********************************************
#*********** SINGULAR VALUE DECOMP ***********
#*********************************************

A = np.array([[1, 2], [3, 4], [5, 6]])
U, S, Vt = np.linalg.svd(A)
print("U:\n", U)
print("S:\n", S)
print("Vt:\n", Vt)

#*********************************************
#************** RANDOM SEED ******************
#*********************************************

print(np.random.randint(1, 100))  # Random
np.random.seed(123)
print(np.random.randint(1, 100))  # Same result each run

#*********************************************
#*********** STATISTICAL FUNCTIONS ***********
#*********************************************

arr = np.array([10, 20, 30, 40, 50])
print("Mean:", np.mean(arr))      # 30.0
print("Median:", np.median(arr))  # 30.0
print("Std Dev:", np.std(arr))    # 14.14

# Normal distribution
print(np.random.normal(0, 1, 5))

# Binomial distribution
print(np.random.binomial(n=10, p=0.5, size=5))

#*********************************************
#****** CORRELATION & COVARIANCE *************
#*********************************************

data1 = np.array([1, 2, 3, 4, 5])
data2 = np.array([5, 4, 3, 2, 1])
print(np.corrcoef(data1, data2)[0,1])  # -1.0
print(np.cov(data1, data2))
# [[2.5 -2.5]
#  [-2.5 2.5]]

#*********************************************
#********** ADVANCED BROADCASTING ************
#*********************************************

arr2d = np.array([[1, 2, 3], [4, 5, 6]])
arr1d = np.array([10, 20, 30])
print(arr2d + arr1d)
# [[11 22 33]
#  [14 25 36]]

#*********************************************
#*********** BOOLEAN & FANCY INDEX ***********
#*********************************************

arr = np.array([10, 20, 30, 40, 50])
print(arr[arr > 25])      # [30 40 50]
print(arr[[1, 3, 4]])     # [20 40 50]

#*********************************************
#************ HANDLING NaN VALUES ************
#*********************************************

arr = np.array([1, 2, np.nan, 4, 5])
print(np.isnan(arr))
arr_no_nan = np.nan_to_num(arr, nan=0)
print(arr_no_nan)  # [1. 2. 0. 4. 5.]

#*********************************************
#************* DATE & TIME OPS ***************
#*********************************************

dates = np.array(['2025-03-01', '2025-03-02', '2025-03-03'], dtype='datetime64[D]')
new_dates = dates + np.arange(3)
print(new_dates)
# ['2025-03-01' '2025-03-03' '2025-03-05']

#*********************************************
#*************** MATRIX INVERSE **************
#*********************************************

A = np.array([[4, 7], [2, 6]])
A_inv = np.linalg.inv(A)
print(A_inv)
# [[ 0.6 -0.7]
#  [-0.2  0.4]]

#*********************************************
#************ STACK & SPLIT ARRAYS ***********
#*********************************************

arr1 = np.array([1, 2, 3])
arr2 = np.array([4, 5, 6])
print(np.stack((arr1, arr2), axis=0))
# [[1 2 3]
#  [4 5 6]]

arr = np.array([1, 2, 3, 4, 5, 6])
print(np.split(arr, 2))  # [array([1,2,3]), array([4,5,6])]

#*********************************************
#************ STRUCTURED ARRAYS **************
#*********************************************

dt = np.dtype([('name', 'S10'), ('age', 'i4'), ('marks', 'f4')])
students = np.array([('John', 20, 85.5), ('Sara', 22, 92.3)], dtype=dt)
print(students['name'])  # [b'John' b'Sara']
print(students['age'])   # [20 22]

#*********************************************
#************** UNIVERSAL FUNC ****************
#*********************************************

arr = np.array([1, 2, 3, 4])
print(np.exp(arr))  # [ 2.718  7.389 20.085 54.598]

#*********************************************
#************** POLYNOMIALS ******************
#*********************************************

p = np.poly1d([2, 3, 1])
print(p)
# 2xÂ² + 3x + 1

#*********************************************
#************** MEMORY & COPY ****************
#*********************************************

arr = np.array([1, 2, 3])
arr_copy = arr.copy()
arr_copy[0] = 100
print(arr)        # [1 2 3]
print(arr_copy)   # [100 2 3]

#*********************************************
#*********** RANDOM SAMPLING *****************
#*********************************************

arr = np.array([1, 2, 3, 4, 5])
print(np.random.choice(arr, size=3, replace=True))

#*********************************************
#********* PERFORMANCE COMPARISON ************
#*********************************************

import time
N = 10_000_000
start = time.time()
print(np.sum(np.arange(N)))
print("Vectorized Time:", time.time() - start)

start = time.time()
print(sum(range(N)))
print("Loop Time:", time.time() - start)

#*********************************************
#*******************Pandas Library**************************
#*********************************************

# 1. Installation and Import
!pip install pandas
import pandas as pd
print(pd.__version__)  # Output: e.g., '2.1.0'

#*********************************************
#*******************Creating DataFrames**************************
#*********************************************

# 2. From a List of Lists
data = [
    ['John', 28, 'New York', 50000],
    ['Sara', 22, 'Los Angeles', 60000],
    ['Paul', 35, 'Chicago', 55000],
    ['Anna', 30, 'Houston', 65000]
]
columns = ['Name', 'Age', 'City', 'Salary']
df = pd.DataFrame(data, columns=columns)
print(df)
# Output:
#    Name  Age         City  Salary
# 0  John   28     New York   50000
# 1  Sara   22  Los Angeles   60000
# 2  Paul   35      Chicago   55000
# 3  Anna   30      Houston   65000

# 3. From CSV File
# df = pd.read_csv('customer_data.csv')
# print(df.head())

# 4. From TXT File
# diabetes = pd.read_csv("diabetes.txt", sep="\s")
# print(diabetes)

# 5. From Excel File
# df = pd.read_excel('diabetes.xlsx')
# df = pd.read_excel('diabetes_multi.xlsx', sheet_name=1)

#*********************************************
#*******************View Data**************************
#*********************************************

df.head()   # Output: first 5 rows
df.tail()   # Output: last 5 rows
df.describe()   # Output: summary statistics of numeric columns
df.info()   # Output: info about columns, types, missing values
df.shape   # Output: (4, 4)
df.columns  # Output: Index(['Name', 'Age', 'City', 'Salary'], dtype='object')
df.copy()  # Creates a copy of DataFrame

#*********************************************
#*******************Selecting Data**************************
#*********************************************

df['Age']  # Single column
df[['Age','Salary']]  # Multiple columns
df.iloc[0]  # First row
df.loc[0]   # Row with index label 0
df.iloc[0,0]  # Specific element
df.loc[0,'Age']  # Specific element by label
df[df['Age'] > 30]  # Conditional filtering
df.iloc[0:2,0:2]  # Slicing rows and columns
df.set_index('Name')  # Set a column as index

#*********************************************
#*******************Cleaning Data**************************
#*********************************************

df.isnull()  # Check nulls
df.isnull().sum()  # Count nulls per column
df.notnull()  # Check non-null
df['Salary'] = df['Salary'].fillna(df['Salary'].mean())  # Fill NaN
df.dropna()  # Drop rows with NaN
df['Age'].astype('float')  # Change type
df.drop_duplicates()  # Remove duplicate rows
df.reset_index()  # Reset index
df.rename(columns={'Age':'CustomerAge'})  # Rename columns

#*********************************************
#*******************Sorting & Filtering**************************
#*********************************************

df.sort_values('Age')  # Ascending
df.sort_values('Age', ascending=False)  # Descending
df[df['Age'] > 30]  # Filter rows
df.query('Age > 30')  # Filter using query
df.nlargest(3,'Salary')  # Top 3 by Salary
df.nsmallest(3,'Salary')  # Bottom 3 by Salary
df['City'].nunique()  # Unique count
df['City'].value_counts()  # Count per category

#*********************************************
#*******************Group Data**************************
#*********************************************

df.groupby('City')  # Group by column
df.groupby('City').mean(numeric_only=True)  # Mean per group
df.groupby('City').sum(numeric_only=True)  # Sum per group
df.groupby('City')['Age'].max()  # Max Age per group
df.pivot_table(values='Salary', index='City', columns='Age', aggfunc='mean')  # Pivot table
df.agg({'Age':'mean','Salary':'sum'})  # Aggregate multiple columns
df['Age'].transform(lambda x: x+10)  # Transform column

#*********************************************
#*******************Statistical Operations**************************
#*********************************************

numeric_df = df.select_dtypes(include=['number'])
numeric_df.mean()  # Column-wise mean
numeric_df.median()
numeric_df.std()
numeric_df.var()
numeric_df.sum()
numeric_df.min()
numeric_df.max()
numeric_df.count()
numeric_df.corr()  # Correlation matrix

#*********************************************
#*******************Data Visualization**************************
#*********************************************

import matplotlib.pyplot as plt

df['Age'].plot(kind='line')  # Line plot
plt.show()
df['City'].value_counts().plot(kind='bar')  # Bar plot
df['City'].value_counts().plot(kind='barh')  # Horizontal bar plot
df['Salary'].plot(kind='hist', bins=20)  # Histogram
df['Salary'].plot(kind='box')  # Box plot
df['Salary'].plot(kind='kde')  # KDE plot
df['City'].value_counts().plot(kind='pie', autopct='%1.1f%%')  # Pie chart
df.plot.scatter(x='Age', y='Salary')  # Scatter plot
df[['Age','Salary']].head(50).plot(kind='area', alpha=0.5)  # Area plot

#*********************************************
#*******************Adding & Deleting Columns**************************
#*********************************************

# Adding
data = {'Name': ['John', 'David', 'Rafael', 'Rodrick'],
        'Height':[145,162,158,163],
        'Qualification':['A','B','C','D']}
df2 = pd.DataFrame(data)
df2['Address'] = ['NewYork','Texas','Colorado','Dakota']
print(df2)
# Output:
#       Name  Height Qualification    Address
# 0     John     145            A    NewYork
# 1    David     162            B       Texas
# 2   Rafael     158            C    Colorado
# 3  Rodrick     163            D      Dakota

# Deleting
df2.drop(['Address'], axis=1, inplace=True)
print(df2)

#*********************************************
#*******************Arithmetic Operations**************************
#*********************************************

df = pd.DataFrame({'A':[10,20,30,40],'B':[0.5,0.6,0.7,0.8]})
print(df + 2)  # Addition
print(df - 2)  # Subtraction
print(df * 2)  # Multiplication
print(df / 2)  # Division
print(df ** 2)  # Exponentiation
print(df % 2)  # Modulus
print(df // 2)  # Floor Division

#*********************************************
#*******************Data Normalization**************************
#*********************************************

df = pd.DataFrame([
    [180000, 110, 18.9, 1400],
    [360000, 905, 23.4, 1800],
    [230000, 230, 14.0, 1300],
    [60000, 450, 13.5, 1500]],
    columns=['Col A','Col B','Col C','Col D'])
# Max Absolute Scaling
df_max_scaled = df.copy()
for col in df_max_scaled.columns:
    df_max_scaled[col] = df_max_scaled[col]/df_max_scaled[col].abs().max()
print(df_max_scaled)

#*********************************************
#*******************Working with Text Data**************************
#*********************************************

# Creating DataFrames with Text Data
data = {'Name':['John','David','Rafael'],'City':['NY','TX','CO']}
df_text = pd.DataFrame(data)
df_text['Name_upper'] = df_text['Name'].str.upper()  # Changing case
df_text['Name_len'] = df_text['Name'].str.len()  # String length
df_text['Name_replace'] = df_text['Name'].str.replace('a','@')  # Replace
df_text['Name_split'] = df_text['Name'].str.split('a')  # Split
print(df_text)

#*********************************************
#*******************Exercises**************************
#*********************************************

# 1. Lands DataFrame
# df_lands = pd.read_csv('Lands.txt', sep='\t', names=['land','area','female','male','population','density'])
# df_lands['population'] = df_lands['male'] + df_lands['female']
# df_lands['density'] = df_lands['population']*1000/df_lands['area']
# print(df_lands[df_lands['area']>30000 & df_lands['population']>10500])
# print(df_lands[df_lands['density']>250])

# *********************************************
# 1. Installation & Imports
# *********************************************
!pip install pandas matplotlib openpyxl

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

print("Pandas version:", pd.__version__)  # e.g., 2.2.2
print("NumPy version:", np.__version__)   # e.g., 2.0.2

# *********************************************
# 2. Creating DataFrames
# *********************************************

# From list of lists
data = [
    ['John', 28, 'New York', 50000],
    ['Sara', 22, 'Los Angeles', 60000],
    ['Paul', 35, 'Chicago', 55000],
    ['Anna', 30, 'Houston', 65000]
]
columns = ['Name', 'Age', 'City', 'Salary']
df = pd.DataFrame(data, columns=columns)
print(df)
# Output:
#    Name  Age         City  Salary
# 0  John   28     New York   50000
# 1  Sara   22  Los Angeles   60000
# 2  Paul   35      Chicago   55000
# 3  Anna   30      Houston   65000

# From CSV
# df = pd.read_csv('customer_data.csv')

# From Excel (single sheet)
# df = pd.read_excel('diabetes.xlsx')

# *********************************************
# 3. Viewing & Inspecting Data
# *********************************************
print(df.head())         # first 5 rows
print(df.tail())         # last 5 rows
print(df.shape)          # (rows, columns)
print(df.info())         # data types & null counts
print(df.describe().T)   # summary statistics
print(df.columns)        # column names

# *********************************************
# 4. Selecting Data
# *********************************************
print(df['Age'])             # Single column
print(df[['Age','Salary']])  # Multiple columns
print(df.iloc[0])            # First row by position
print(df.loc[0])             # First row by label
print(df.iloc[0,0])          # Specific element by position
print(df.loc[0,'Age'])       # Specific element by label

# Conditional selection
print(df[df['Age']>30])       # Filter
print(df.query('Age>30'))     # Query

# Random sampling (safe for small DataFrame)
n = 5
df.sample(min(n, len(df)), random_state=1)

# Top/Bottom values
print(df.nlargest(3,'Salary'))  # Top 3 Salary
print(df.nsmallest(3,'Salary')) # Bottom 3 Salary

# *********************************************
# 5. Data Cleaning
# *********************************************
df['Salary'] = df['Salary'].fillna(df['Salary'].mean())  # Fill NaN with mean
df['Salary'].fillna(0, inplace=True)                     # Fill NaN with 0
df.dropna(inplace=False)                                 # Drop rows with NaN
df['Age'] = df['Age'].astype(float)                      # Change dtype
df.drop_duplicates(inplace=False)                        # Remove duplicates
df.reset_index(drop=True, inplace=True)                  # Reset index
df.rename(columns={'Age':'CustomerAge'}, inplace=False)  # Rename column

# *********************************************
# 6. Sorting & Filtering
# *********************************************
df.sort_values('Age', ascending=True)                           # Sort by Age ascending
df.sort_values('Age', ascending=False)                          # Sort descending
df.sort_values(['City','Age'], ascending=[True, False])         # Sort by multiple columns
df.query('Age>25')                                               # Filter with query
df[df['Age']>25]                                                 # Filter
df.reset_index(drop=True, inplace=True)

# *********************************************
# 7. Grouping & Aggregation
# *********************************************
# Example column: 'Subscription', 'PurchaseAmount'
# df.groupby('Subscription').mean(numeric_only=True)
# df.groupby('Subscription')['Age'].max()
# df.pivot_table(values='PurchaseAmount', index='Subscription', columns='City', aggfunc='mean')
# df.agg({'Age':'mean', 'Salary':'sum'})
# df['Age'].transform(lambda x: x+10)

# *********************************************
# 8. Arithmetic Operations
# *********************************************
data = {'A':[10,20,30,40], 'B':[0.5,0.6,0.7,0.8]}
df2 = pd.DataFrame(data)
print(df2+2)       # Addition
print(df2-2)       # Subtraction
print(df2*2)       # Multiplication
print(df2/2)       # Division
print(df2**2)      # Exponentiation
print(df2%2)       # Modulus
print(df2//2)      # Floor division

# *********************************************
# 9. Data Normalization (Max Abs Scaling)
# *********************************************
df3 = pd.DataFrame([
    [180000, 110, 18.9, 1400],
    [360000, 905, 23.4, 1800],
    [230000, 230, 14.0, 1300],
    [60000, 450, 13.5, 1500]
], columns=['ColA','ColB','ColC','ColD'])
df_max_scaled = df3.copy()
for col in df_max_scaled.columns:
    df_max_scaled[col] = df_max_scaled[col]/df_max_scaled[col].abs().max()
print(df_max_scaled)

# *********************************************
# 10. Text Data Manipulation
# *********************************************
df_text = pd.DataFrame({'Name':['John','David','Rafael','Rodrick']})
df_text['Name_upper'] = df_text['Name'].str.upper()      # Uppercase
df_text['Name_len'] = df_text['Name'].str.len()         # Length
df_text['Name_replace'] = df_text['Name'].str.replace('a','@') # Replace
df_text['Name_split'] = df_text['Name'].str.split('a')  # Split
df_text['Name_sub'] = df_text['Name'].str[:3]           # Substring
print(df_text)

# *********************************************
# 11. Matplotlib Visualizations
# *********************************************
# Line plot
df['Age'].plot(kind='line')
plt.title('Line Plot of Age')
plt.xlabel('Index')
plt.ylabel('Age')
plt.show()

# Bar plot
df['Salary'].plot(kind='bar')
plt.show()

# Horizontal bar
df['Salary'].plot(kind='barh')
plt.show()

# Histogram
df['Salary'].plot(kind='hist', bins=5)
plt.show()

# Box plot
df['Salary'].plot(kind='box')
plt.show()

# KDE plot
df['Salary'].plot(kind='kde')
plt.show()

# Pie chart
df['Salary'].plot(kind='pie', autopct='%1.1f%%')
plt.show()

# Scatter plot
df.plot.scatter(x='Age', y='Salary')
plt.show()

# Area plot
df[['Age','Salary']].head(4).plot(kind='area', alpha=0.5)
plt.show()